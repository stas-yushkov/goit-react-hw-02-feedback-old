{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.styled.js","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.styled.js","components/Notification/Notification.jsx","components/Section/Section.styled.js","components/Section/Section.jsx","components/Statistics/Statistics.styled.js","components/Statistics/Statistics.jsx","App.js","index.js"],"names":["ListItem","styled","li","Button","button","ButtonList","ul","FeedbackOptions","options","onLeaveFeedback","map","name","type","onClick","StyledNotification","section","Title","h2","Notification","message","StyledSection","Container","div","Section","title","children","Statistics","props","good","neutral","bad","total","positivePercentage","defaultProps","stats","App","state","countTotalFeedback","Object","values","reduce","acc","value","countPositiveFeedbackPercentage","Math","round","handleLeaveFeedback","setState","currentState","feedbackOptions","keys","this","isShowStatistics","Component","ReactDom","render","StrictMode","document","querySelector"],"mappings":"oRAEaA,EAAWC,IAAOC,GAAV,oHAQRC,EAASF,IAAOG,OAAV,uGAONC,EAAaJ,IAAOK,GAAV,+H,OCfjBC,EAAkB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,8BACE,cAACJ,EAAD,UACGG,EAAQE,KAAI,SAAAC,GAAI,OACf,cAACX,EAAD,UACE,cAACG,EAAD,CAAQS,KAAK,SAASC,QAAS,kBAAMJ,EAAgBE,IAArD,SACGA,KAFUA,WCLZG,EAAqBb,IAAOc,QAAV,0BAElBC,EAAQf,IAAOgB,GAAV,2CCFZC,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACE,cAACL,EAAD,UACE,cAACE,EAAD,UAAQG,OCHDC,EAAgBnB,IAAOc,QAAV,wEAKbC,EAAQf,IAAOgB,GAAV,0CAILI,EAAYpB,IAAOqB,IAAV,0FCRhBC,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,cAACL,EAAD,UACE,eAACC,EAAD,WACE,cAAC,EAAD,UAAQG,IACPC,QCNIzB,EAAWC,IAAOC,GAAV,iDCGfwB,EAAa,SAAAC,GACjB,IAAQC,EAAkDD,EAAlDC,KAAMC,EAA4CF,EAA5CE,QAASC,EAAmCH,EAAnCG,IAAKC,EAA8BJ,EAA9BI,MAAOC,EAAuBL,EAAvBK,mBAEnC,OACE,+BACE,eAAC,EAAD,oBAAiBJ,KACjB,eAAC,EAAD,uBAAoBC,KACpB,eAAC,EAAD,mBAAgBC,KAChB,eAAC,EAAD,qBAAkBC,KAClB,eAAC,EAAD,iCAA8BC,EAA9B,YAKNN,EAAWO,aAAe,CACxBC,MAAO,CACLN,KAAM,EACNC,QAAS,EACTC,IAAK,I,IC6BMK,E,4MA/CbC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPO,mBAAqB,kBACnBC,OAAOC,OAAO,EAAKH,OAAOI,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAMC,IAAO,I,EAEhEC,gCAAkC,kBAChCC,KAAKC,MAAO,EAAKT,MAAMR,KAAO,EAAKS,qBAAwB,M,EAE7DS,oBAAsB,SAAAnC,GAAI,OACxB,EAAKoC,UAAS,SAAAC,GAAY,sBAAQrC,EAAOqC,EAAarC,GAAQ,O,4CAEhE,WACE,IAAMsC,EAAkBX,OAAOY,KAAKC,KAAKf,OACnCJ,EAAqBmB,KAAKR,kCAC1BZ,EAAQoB,KAAKd,qBACbe,EAAmBrB,EAAQ,EAEjC,OACE,gCACE,cAAC,EAAD,CAASP,MAAM,wBAAf,SACE,cAAC,EAAD,CACEhB,QAASyC,EACTxC,gBAAiB0C,KAAKL,wBAI1B,eAAC,EAAD,CAAStB,MAAM,aAAf,UACG4B,GACC,cAAC,EAAD,CACExB,KAAMuB,KAAKf,MAAMR,KACjBC,QAASsB,KAAKf,MAAMP,QACpBC,IAAKqB,KAAKf,MAAMN,IAChBC,MAAOA,EACPC,mBAAoBA,KAGtBoB,GAAoB,cAAC,EAAD,CAAcjC,QAAQ,gC,GAzCpCkC,a,YCElBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,cAAc,Y","file":"static/js/main.ba0ec49f.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  list-style: none;\n  margin-right: 8px;\n  &:last-child {\n    margin-right: 0;\n  }\n`;\n\nexport const Button = styled.button`\n  padding: 8px;\n  &:first-letter {\n    text-transform: capitalize;\n  }\n`;\n\nexport const ButtonList = styled.ul`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 0;\n  padding: 0;\n`;\n","import { ListItem, Button, ButtonList } from './FeedbackOptions.styled';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <div>\n      <ButtonList>\n        {options.map(name => (\n          <ListItem key={name}>\n            <Button type=\"button\" onClick={() => onLeaveFeedback(name)}>\n              {name}\n            </Button>\n          </ListItem>\n        ))}\n      </ButtonList>\n    </div>\n  );\n};\n\nexport { FeedbackOptions };\n","import styled from 'styled-components';\n\nexport const StyledNotification = styled.section``;\n\nexport const Title = styled.h2`\n  color: red;\n`;\n","import { StyledNotification, Title } from './Notification.styled';\n\nconst Notification = ({ message }) => {\n  return (\n    <StyledNotification>\n      <Title>{message}</Title>\n    </StyledNotification>\n  );\n};\n\nexport { Notification };\n","import styled from 'styled-components';\n\nexport const StyledSection = styled.section`\n  margin-top: 60px;\n  text-align: center;\n`;\n\nexport const Title = styled.h2`\n  color:red;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 8px;\n`;","import React from 'react';\nimport { StyledSection, Title, Container } from './Section.styled';\n\nconst Section = ({ title, children }) => {\n  return (\n    <StyledSection>\n      <Container>\n        <Title>{title}</Title>\n        {children}\n      </Container>\n    </StyledSection>\n  );\n};\n\nexport { Section };\n","import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  list-style: none;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { ListItem } from './Statistics.styled'\n\nconst Statistics = props => {\n  const { good, neutral, bad, total, positivePercentage } = props;\n\n  return (\n    <ul>\n      <ListItem>Good: {good}</ListItem>\n      <ListItem>Neutral: {neutral}</ListItem>\n      <ListItem>Bad: {bad}</ListItem>\n      <ListItem>Total: {total}</ListItem>\n      <ListItem>Positive feedback: {positivePercentage} %</ListItem>\n    </ul>\n  );\n};\n\nStatistics.defaultProps = {\n  stats: {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  },\n};\n\nStatistics.propTypes = {\n  stats: PropTypes.exact({\n    good: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n    total: PropTypes.number,\n    positivePercentage: PropTypes.number,\n  }),\n};\n\nexport { Statistics };\n","import { Component } from 'react';\n\nimport { FeedbackOptions, Statistics, Section, Notification } from 'components';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback = () =>\n    Object.values(this.state).reduce((acc, value) => acc + value, 0);\n\n  countPositiveFeedbackPercentage = () =>\n    Math.round((this.state.good / this.countTotalFeedback()) * 100);\n\n  handleLeaveFeedback = name =>\n    this.setState(currentState => ({ [name]: currentState[name] + 1 }));\n\n  render() {\n    const feedbackOptions = Object.keys(this.state);\n    const positivePercentage = this.countPositiveFeedbackPercentage();\n    const total = this.countTotalFeedback();\n    const isShowStatistics = total > 0;\n\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={feedbackOptions}\n            onLeaveFeedback={this.handleLeaveFeedback}\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {isShowStatistics && (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={total}\n              positivePercentage={positivePercentage}\n            />\n          )}\n          {!isShowStatistics && <Notification message=\"No feedback given\" />}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDom from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\n\nReactDom.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}